{"remainingRequest":"D:\\fda\\fda-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\fda\\fda-frontend\\node_modules\\vue-excel-xlsx\\VueExcelXlsx.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\fda\\fda-frontend\\node_modules\\vue-excel-xlsx\\VueExcelXlsx.vue","mtime":1695526211147},{"path":"D:\\fda\\fda-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1695526242921},{"path":"D:\\fda\\fda-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1695526245291},{"path":"D:\\fda\\fda-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1695526242921},{"path":"D:\\fda\\fda-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1695526233884}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBYTFNYIGZyb20gJ3hsc3gveGxzeCc7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAidnVlLWV4Y2VsLXhsc3giLAogICAgcHJvcHM6IHsKICAgICAgICBjb2x1bW5zOiB7CiAgICAgICAgICAgIHR5cGU6IEFycmF5LAogICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbXQogICAgICAgIH0sCiAgICAgICAgZGF0YTogewogICAgICAgICAgICB0eXBlOiBBcnJheSwKICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gIFtdCiAgICAgICAgfSwKICAgICAgICBmaWxlTmFtZTogewogICAgICAgICAgICB0eXBlOiBTdHJpbmcsCiAgICAgICAgICAgIGRlZmF1bHQ6ICdleGNlbCcKICAgICAgICB9LAogICAgICAgIHNoZWV0TmFtZTogewogICAgICAgICAgICB0eXBlOiBTdHJpbmcsCiAgICAgICAgICAgIGRlZmF1bHQ6ICdTaGVldE5hbWUnCiAgICAgICAgfSwKICAgICAgICBmaWxlVHlwZTogewogICAgICAgICAgICB0eXBlOiBTdHJpbmcsCiAgICAgICAgICAgIGRlZmF1bHQ6ICd4bHN4JywKICAgICAgICAgICAgdmFsaWRhdG9yOiAodmFsKSA9PiBbJ3hsc3gnLCAneGxzJ10uaW5jbHVkZXModmFsKQogICAgICAgIH0KICAgIH0sCgogICAgbWV0aG9kczogewogICAgICAgIGV4cG9ydEV4Y2VsKCkgewogICAgICAgICAgICBsZXQgY3JlYXRlWExTTEZvcm1hdE9iaiA9IFtdOwogICAgICAgICAgICBsZXQgbmV3WGxzSGVhZGVyID0gW107CiAgICAgICAgICAgIGxldCB2bSA9IHRoaXM7CiAgICAgICAgICAgIGlmICh2bS5jb2x1bW5zLmxlbmd0aCA9PT0gMCl7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiQWRkIGNvbHVtbnMhIik7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZtLmRhdGEubGVuZ3RoID09PSAwKXsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJBZGQgZGF0YSEiKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICB2bS5jb2x1bW5zLm1hcChjb2x1bW4gPT4gewogICAgICAgICAgICAgICAgbmV3WGxzSGVhZGVyLnB1c2goY29sdW1uLmxhYmVsKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjcmVhdGVYTFNMRm9ybWF0T2JqLnB1c2gobmV3WGxzSGVhZGVyKTsKICAgICAgICAgICAgdm0uZGF0YS5tYXAodmFsdWUgPT4gewogICAgICAgICAgICAgICAgbGV0IGlubmVyUm93RGF0YSA9IFtdOwogICAgICAgICAgICAgICAgdm0uY29sdW1ucy5tYXAodmFsID0+IHsKICAgICAgICAgICAgICAgICAgbGV0IGZpZWxkVmFsdWUgPSB2YWx1ZVt2YWwuZmllbGRdOwogICAgICAgICAgICAgICAgICBpZiAodmFsLmZpZWxkLnNwbGl0KCcuJykubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgICAgIGZpZWxkVmFsdWUgPSB0aGlzLmdldE5lc3RlZFZhbHVlKHZhbHVlLCB2YWwuZmllbGQpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICh2YWwuZGF0YUZvcm1hdCAmJiB0eXBlb2YgdmFsLmRhdGFGb3JtYXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJSb3dEYXRhLnB1c2godmFsLmRhdGFGb3JtYXQoZmllbGRWYWx1ZSkpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyUm93RGF0YS5wdXNoKGZpZWxkVmFsdWUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY3JlYXRlWExTTEZvcm1hdE9iai5wdXNoKGlubmVyUm93RGF0YSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgbGV0IGZpbGVOYW1lID0gdm0uZmlsZU5hbWUgKyAiLiIgKyB2bS5maWxlVHlwZTsKCiAgICAgICAgICAgIGxldCB3c19uYW1lID0gdm0uc2hlZXROYW1lOwoKICAgICAgICAgICAgbGV0IHdiID0gWExTWC51dGlscy5ib29rX25ldygpLAogICAgICAgICAgICAgICAgd3MgPSBYTFNYLnV0aWxzLmFvYV90b19zaGVldChjcmVhdGVYTFNMRm9ybWF0T2JqKTsKICAgICAgICAgICAgWExTWC51dGlscy5ib29rX2FwcGVuZF9zaGVldCh3Yiwgd3MsIHdzX25hbWUpOwogICAgICAgICAgICBYTFNYLndyaXRlRmlsZSh3YiwgZmlsZU5hbWUpOwogICAgICAgIH0sCiAgICAgICAgZ2V0TmVzdGVkVmFsdWUob2JqZWN0LCBzdHJpbmcpIHsKICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL1xbKFx3KylcXS9nLCAnLiQxJyk7CiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9eXC4vLCAnJyk7CiAgICAgICAgICAgIGxldCBhID0gc3RyaW5nLnNwbGl0KCcuJyk7CiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBuID0gYS5sZW5ndGg7IGkgPCBuOyArK2kpIHsKICAgICAgICAgICAgICBsZXQgayA9IGFbaV07CiAgICAgICAgICAgICAgaWYgKGsgaW4gb2JqZWN0KSB7CiAgICAgICAgICAgICAgICBvYmplY3QgPSBvYmplY3Rba107CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG9iamVjdDsKICAgICAgICB9CiAgICB9Cn0K"},{"version":3,"sources":["VueExcelXlsx.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VueExcelXlsx.vue","sourceRoot":"node_modules/vue-excel-xlsx","sourcesContent":["<template>\r\n    <button @click=\"exportExcel\">\r\n        <slot></slot>\r\n    </button>\r\n</template>\r\n\r\n<script>\r\n    import XLSX from 'xlsx/xlsx';\r\n\r\n    export default {\r\n        name: \"vue-excel-xlsx\",\r\n        props: {\r\n            columns: {\r\n                type: Array,\r\n                default: () => []\r\n            },\r\n            data: {\r\n                type: Array,\r\n                default: () =>  []\r\n            },\r\n            fileName: {\r\n                type: String,\r\n                default: 'excel'\r\n            },\r\n            sheetName: {\r\n                type: String,\r\n                default: 'SheetName'\r\n            },\r\n            fileType: {\r\n                type: String,\r\n                default: 'xlsx',\r\n                validator: (val) => ['xlsx', 'xls'].includes(val)\r\n            }\r\n        },\r\n\r\n        methods: {\r\n            exportExcel() {\r\n                let createXLSLFormatObj = [];\r\n                let newXlsHeader = [];\r\n                let vm = this;\r\n                if (vm.columns.length === 0){\r\n                    console.log(\"Add columns!\");\r\n                    return;\r\n                }\r\n                if (vm.data.length === 0){\r\n                    console.log(\"Add data!\");\r\n                    return;\r\n                }\r\n                vm.columns.map(column => {\r\n                    newXlsHeader.push(column.label);\r\n                });\r\n\r\n                createXLSLFormatObj.push(newXlsHeader);\r\n                vm.data.map(value => {\r\n                    let innerRowData = [];\r\n                    vm.columns.map(val => {\r\n                      let fieldValue = value[val.field];\r\n                      if (val.field.split('.').length > 1) {\r\n                        fieldValue = this.getNestedValue(value, val.field);\r\n                      }\r\n                      if (val.dataFormat && typeof val.dataFormat === 'function') {\r\n                            innerRowData.push(val.dataFormat(fieldValue));\r\n                        } else {\r\n                            innerRowData.push(fieldValue);\r\n                        }\r\n                    });\r\n                    createXLSLFormatObj.push(innerRowData);\r\n                });\r\n\r\n                let fileName = vm.fileName + \".\" + vm.fileType;\r\n\r\n                let ws_name = vm.sheetName;\r\n\r\n                let wb = XLSX.utils.book_new(),\r\n                    ws = XLSX.utils.aoa_to_sheet(createXLSLFormatObj);\r\n                XLSX.utils.book_append_sheet(wb, ws, ws_name);\r\n                XLSX.writeFile(wb, fileName);\r\n            },\r\n            getNestedValue(object, string) {\r\n                string = string.replace(/\\[(\\w+)\\]/g, '.$1');\r\n                string = string.replace(/^\\./, '');\r\n                let a = string.split('.');\r\n                for (let i = 0, n = a.length; i < n; ++i) {\r\n                  let k = a[i];\r\n                  if (k in object) {\r\n                    object = object[k];\r\n                  } else {\r\n                    return;\r\n                  }\r\n                }\r\n                return object;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n"]}]}