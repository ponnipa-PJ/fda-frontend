{"remainingRequest":"/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ponnipa/Documents/GitHub/fda-frontend/src/components/category.vue?vue&type=template&id=376cda0e&","dependencies":[{"path":"/Users/ponnipa/Documents/GitHub/fda-frontend/src/components/category.vue","mtime":1689752970071},{"path":"/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1687492401267},{"path":"/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1687492401916},{"path":"/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1687492401267},{"path":"/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/vue-loader/lib/index.js","mtime":1687492401738}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}