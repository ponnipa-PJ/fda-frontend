{"remainingRequest":"/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/thread-loader/dist/cjs.js!/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/babel-loader/lib/index.js!/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/vue-excel-xlsx/VueExcelXlsx.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/vue-excel-xlsx/VueExcelXlsx.vue","mtime":1687492401419},{"path":"/Users/ponnipa/Documents/GitHub/fda-frontend/babel.config.js","mtime":1677654957527},{"path":"/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1687492401267},{"path":"/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/thread-loader/dist/cjs.js","mtime":1687492401222},{"path":"/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/babel-loader/lib/index.js","mtime":1687492401655},{"path":"/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1687492401267},{"path":"/Users/ponnipa/Documents/GitHub/fda-frontend/node_modules/vue-loader/lib/index.js","mtime":1687492401738}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IFhMU1ggZnJvbSAneGxzeC94bHN4JzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJ2dWUtZXhjZWwteGxzeCIsCiAgcHJvcHM6IHsKICAgIGNvbHVtbnM6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfSwKICAgIGRhdGE6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfSwKICAgIGZpbGVOYW1lOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ2V4Y2VsJwogICAgfSwKICAgIHNoZWV0TmFtZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdTaGVldE5hbWUnCiAgICB9LAogICAgZmlsZVR5cGU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAneGxzeCcsCiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKHZhbCkgewogICAgICAgIHJldHVybiBbJ3hsc3gnLCAneGxzJ10uaW5jbHVkZXModmFsKTsKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZXhwb3J0RXhjZWw6IGZ1bmN0aW9uIGV4cG9ydEV4Y2VsKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGNyZWF0ZVhMU0xGb3JtYXRPYmogPSBbXTsKICAgICAgdmFyIG5ld1hsc0hlYWRlciA9IFtdOwogICAgICB2YXIgdm0gPSB0aGlzOwoKICAgICAgaWYgKHZtLmNvbHVtbnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgY29uc29sZS5sb2coIkFkZCBjb2x1bW5zISIpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKHZtLmRhdGEubGVuZ3RoID09PSAwKSB7CiAgICAgICAgY29uc29sZS5sb2coIkFkZCBkYXRhISIpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdm0uY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikgewogICAgICAgIG5ld1hsc0hlYWRlci5wdXNoKGNvbHVtbi5sYWJlbCk7CiAgICAgIH0pOwogICAgICBjcmVhdGVYTFNMRm9ybWF0T2JqLnB1c2gobmV3WGxzSGVhZGVyKTsKICAgICAgdm0uZGF0YS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgdmFyIGlubmVyUm93RGF0YSA9IFtdOwogICAgICAgIHZtLmNvbHVtbnMubWFwKGZ1bmN0aW9uICh2YWwpIHsKICAgICAgICAgIHZhciBmaWVsZFZhbHVlID0gdmFsdWVbdmFsLmZpZWxkXTsKCiAgICAgICAgICBpZiAodmFsLmZpZWxkLnNwbGl0KCcuJykubGVuZ3RoID4gMSkgewogICAgICAgICAgICBmaWVsZFZhbHVlID0gX3RoaXMuZ2V0TmVzdGVkVmFsdWUodmFsdWUsIHZhbC5maWVsZCk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHZhbC5kYXRhRm9ybWF0ICYmIHR5cGVvZiB2YWwuZGF0YUZvcm1hdCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICBpbm5lclJvd0RhdGEucHVzaCh2YWwuZGF0YUZvcm1hdChmaWVsZFZhbHVlKSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpbm5lclJvd0RhdGEucHVzaChmaWVsZFZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBjcmVhdGVYTFNMRm9ybWF0T2JqLnB1c2goaW5uZXJSb3dEYXRhKTsKICAgICAgfSk7CiAgICAgIHZhciBmaWxlTmFtZSA9IHZtLmZpbGVOYW1lICsgIi4iICsgdm0uZmlsZVR5cGU7CiAgICAgIHZhciB3c19uYW1lID0gdm0uc2hlZXROYW1lOwogICAgICB2YXIgd2IgPSBYTFNYLnV0aWxzLmJvb2tfbmV3KCksCiAgICAgICAgICB3cyA9IFhMU1gudXRpbHMuYW9hX3RvX3NoZWV0KGNyZWF0ZVhMU0xGb3JtYXRPYmopOwogICAgICBYTFNYLnV0aWxzLmJvb2tfYXBwZW5kX3NoZWV0KHdiLCB3cywgd3NfbmFtZSk7CiAgICAgIFhMU1gud3JpdGVGaWxlKHdiLCBmaWxlTmFtZSk7CiAgICB9LAogICAgZ2V0TmVzdGVkVmFsdWU6IGZ1bmN0aW9uIGdldE5lc3RlZFZhbHVlKG9iamVjdCwgc3RyaW5nKSB7CiAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9cWyhcdyspXF0vZywgJy4kMScpOwogICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXlwuLywgJycpOwogICAgICB2YXIgYSA9IHN0cmluZy5zcGxpdCgnLicpOwoKICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhLmxlbmd0aDsgaSA8IG47ICsraSkgewogICAgICAgIHZhciBrID0gYVtpXTsKCiAgICAgICAgaWYgKGsgaW4gb2JqZWN0KSB7CiAgICAgICAgICBvYmplY3QgPSBvYmplY3Rba107CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBvYmplY3Q7CiAgICB9CiAgfQp9Ow=="},{"version":3,"mappings":";;;;;;;;;;;AAOA;AAEA;AACAA,wBADA;AAEAC;AACAC;AACAC,iBADA;AAEAC;AAAA;AAAA;AAFA,KADA;AAKAC;AACAF,iBADA;AAEAC;AAAA;AAAA;AAFA,KALA;AASAE;AACAH,kBADA;AAEAC;AAFA,KATA;AAaAG;AACAJ,kBADA;AAEAC;AAFA,KAbA;AAiBAI;AACAL,kBADA;AAEAC,qBAFA;AAGAK;AAAA;AAAA;AAHA;AAjBA,GAFA;AA0BAC;AACAC,eADA,yBACA;AAAA;;AACA;AACA;AACA;;AACA;AACAC;AACA;AACA;;AACA;AACAA;AACA;AACA;;AACAC;AACAC;AACA,OAFA;AAIAC;AACAF;AACA;AACAA;AACA;;AACA;AACAG;AACA;;AACA;AACAC;AACA,WAFA,MAEA;AACAA;AACA;AACA,SAVA;AAWAF;AACA,OAdA;AAgBA;AAEA;AAEA;AAAA,UACAG,iDADA;AAEAC;AACAA;AACA,KA1CA;AA2CAC,kBA3CA,0BA2CAC,MA3CA,EA2CAC,MA3CA,EA2CA;AACAA;AACAA;AACA;;AACA;AACA;;AACA;AACAD;AACA,SAFA,MAEA;AACA;AACA;AACA;;AACA;AACA;AAxDA;AA1BA","names":["name","props","columns","type","default","data","fileName","sheetName","fileType","validator","methods","exportExcel","console","vm","newXlsHeader","createXLSLFormatObj","fieldValue","innerRowData","ws","XLSX","getNestedValue","object","string"],"sourceRoot":"node_modules/vue-excel-xlsx","sources":["VueExcelXlsx.vue"],"sourcesContent":["<template>\r\n    <button @click=\"exportExcel\">\r\n        <slot></slot>\r\n    </button>\r\n</template>\r\n\r\n<script>\r\n    import XLSX from 'xlsx/xlsx';\r\n\r\n    export default {\r\n        name: \"vue-excel-xlsx\",\r\n        props: {\r\n            columns: {\r\n                type: Array,\r\n                default: () => []\r\n            },\r\n            data: {\r\n                type: Array,\r\n                default: () =>  []\r\n            },\r\n            fileName: {\r\n                type: String,\r\n                default: 'excel'\r\n            },\r\n            sheetName: {\r\n                type: String,\r\n                default: 'SheetName'\r\n            },\r\n            fileType: {\r\n                type: String,\r\n                default: 'xlsx',\r\n                validator: (val) => ['xlsx', 'xls'].includes(val)\r\n            }\r\n        },\r\n\r\n        methods: {\r\n            exportExcel() {\r\n                let createXLSLFormatObj = [];\r\n                let newXlsHeader = [];\r\n                let vm = this;\r\n                if (vm.columns.length === 0){\r\n                    console.log(\"Add columns!\");\r\n                    return;\r\n                }\r\n                if (vm.data.length === 0){\r\n                    console.log(\"Add data!\");\r\n                    return;\r\n                }\r\n                vm.columns.map(column => {\r\n                    newXlsHeader.push(column.label);\r\n                });\r\n\r\n                createXLSLFormatObj.push(newXlsHeader);\r\n                vm.data.map(value => {\r\n                    let innerRowData = [];\r\n                    vm.columns.map(val => {\r\n                      let fieldValue = value[val.field];\r\n                      if (val.field.split('.').length > 1) {\r\n                        fieldValue = this.getNestedValue(value, val.field);\r\n                      }\r\n                      if (val.dataFormat && typeof val.dataFormat === 'function') {\r\n                            innerRowData.push(val.dataFormat(fieldValue));\r\n                        } else {\r\n                            innerRowData.push(fieldValue);\r\n                        }\r\n                    });\r\n                    createXLSLFormatObj.push(innerRowData);\r\n                });\r\n\r\n                let fileName = vm.fileName + \".\" + vm.fileType;\r\n\r\n                let ws_name = vm.sheetName;\r\n\r\n                let wb = XLSX.utils.book_new(),\r\n                    ws = XLSX.utils.aoa_to_sheet(createXLSLFormatObj);\r\n                XLSX.utils.book_append_sheet(wb, ws, ws_name);\r\n                XLSX.writeFile(wb, fileName);\r\n            },\r\n            getNestedValue(object, string) {\r\n                string = string.replace(/\\[(\\w+)\\]/g, '.$1');\r\n                string = string.replace(/^\\./, '');\r\n                let a = string.split('.');\r\n                for (let i = 0, n = a.length; i < n; ++i) {\r\n                  let k = a[i];\r\n                  if (k in object) {\r\n                    object = object[k];\r\n                  } else {\r\n                    return;\r\n                  }\r\n                }\r\n                return object;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n"]}]}